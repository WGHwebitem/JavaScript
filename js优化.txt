1、on绑定事件
$("table").on("click", "td", function(){
　　　　$(this).toggleClass("click");
　　});  （子元素"委托"父元素处理这个事件）

更好的写法，则是把事件绑定在document对象上面。
　　$(document).on("click", "td", function(){
　　　　$(this).toggleClass("click");
　　});
如果要取消事件的绑定，就使用off()方法。
　　$(document).off("click", "td");

2、JS封装方法：
var name = "The Window";
　　var object = {
　　　　name : "My Object",
　　　　getNameFunc : function(){
　　　　　　return function(){
　　　　　　　　return this.name;
　　　　　　};
　　　　}，
           getik1:function(){
			alert(1);
		}
　　};
　　alert(object.getNameFunc()());执行

3、Javascript有两个表示"相等"的运算符："相等"（== 只比较值）和"严格相等"（=== 比较两个的值和类型是否一样）。建议使用后一个，因为"相等"运算符会自动转换变量类型，造成很多意想不到的情况

4、不要使用自增（++）和自减（--）运算符，用+=和-=代替。

5、建构函数(构造函数--new)的函数名，采用首字母大写（InitialCap）；其他函数名，一律首字母小写。

6、对多个条件使用：Array.includes方法；先将条件放到一个数组中，然后在includes()方法判断一个数组是否包含一个指定的值（返回true or false）
eg:function text(abj){
  var fedv=['apple','cherry','strawberry'];
   if(abj.includes(fedv)){
alert('red');
     }
}
7、更少的嵌套，尽早的返回；尤其是当你有很长的 if 语句时（想象一下，你需要滚动到最底部才能知道还有一个 else 语句，这并不酷）

8、选择Map或对象字面量，而不是Switch语句，
 function test(color) {
  switch (color) {
    case 'red':
      return ['apple', 'strawberry'];
    case 'yellow':
      return ['banana', 'pineapple'];
    case 'purple':
      return ['grape', 'plum'];
    default:
      return [];
  }
}
test(null); // []
test('yellow'); // ['banana', 'pineapple']

//对象自变量
var fruitColor = {
    red: ['apple', 'strawberry'],
    yellow: ['banana', 'pineapple'],
    purple: ['grape', 'plum']
  };
 
function test(color) {
  return fruitColor[color] || [];
}

//Map
var  fruitColor = new Map()
    .set('red', ['apple', 'strawberry'])
    .set('yellow', ['banana', 'pineapple'])
    .set('purple', ['grape', 'plum']);
 
function test(color) {
  return fruitColor.get(color) || [];
}
var t=test('red');
var obj=document.getElementById('tv');
obj.innerHTML=test('red');


